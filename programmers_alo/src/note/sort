
1.
 ArrayList<Integer> answer = new ArrayList<>();
 ...
Collections.sort(answer);

2.
List<Integer> list = new ArrayList<Integer>();
answer = new int[list.size()];
Arrays.sort(answer);



https://defacto-standard.tistory.com/18

Collections.sort()는 collection의 List를 정렬할 때 쓰고
Array.sort()는 Primitive Type이나 Object Type의 Array를 정렬할 때 쓴다.

기본적으로 오름차순 정렬이고, 인자는 Array또는 List를 넣어주면 된다.

Collections.reverse()는 내림차순이 아니라 리스트의 구성을 반대로 뒤집는다.




https://devlog-wjdrbs96.tistory.com/68
https://devlog-wjdrbs96.tistory.com/70?category=882228
Comparable : 객체 간의 일반적인 정렬이 필요할 때, Comparable인터페이스를 확장해서 정렬의 기준을 정의하는 compareTo()메서드를 구현한다.
Comparator : 객체 간의 특정한 정렬이 필요한 때, Comparator인터페이스를 확장해서 특정 기준을 정의하는 compare()메서드를 구현한다.
공통점 : 정렬의 기준을 정의한다.
차이점 : 정렬 기준이 일반적이냐 일반적이지 않냐와 compareTo(Object o)메서드를 구현하는냐 compare(Obkect o1,Object o2)를 구현하느냐가 전부다..